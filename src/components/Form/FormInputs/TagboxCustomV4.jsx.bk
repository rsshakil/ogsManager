import React, {useCallback, useEffect, useRef, useState} from "react";
import { useField, useFormikContext } from 'formik';
import {stringify, v4 as uuid} from 'uuid';
import AddRequiredText from "../../HelpingComponent/AddRequiredText";
import {Button} from "devextreme-react/button";
import {Column, FilterRow, Lookup} from "devextreme-react/data-grid";
import Table from "../../ui/Table";
import {useToast} from "../../../contexts/ToastContext";
import {MenuButtonSub} from "../../atoms/buttons/MenuButtonSub";

const responseData = [
    { key: 'tag', caption: "タグ" },
    { key: 'item', caption: "アイテム" },
];

export default function TagboxCustomV4({
    detailLoading,
    initLoading,
    tagLoading,
    itemLoading,
    placeholder = "Select...",
    initialData = [],
    initialServerSelectedDataDetails = [],
    grouped = false,
    valueExpr = "id",
    displayExpr = "caption",
    ondemandServiceUrl = "",
    bgGroupedColorMapper = {},
    searchEnabled = false,
    setFieldValue,
    itemRender,
    label,
    wrapClass = "",
    labelClassName,
    inputClassName,
    isRequired,
    requiredText,
    keyUpdate = "",
    maxItemSelectLimit = undefined,
    tags,
    tagDataSource,
    itemDataSource,
    selectedItems,
    ...rest
}) {
    const { showToast } = useToast();
    const formik = useFormikContext();
    const selectedTagsRef = useRef(null);
    const tagBoxWrapperRef = useRef(null);
    const tagDataGridRef = useRef(null);
    const itemDataGridRef = useRef(null);
    const elementRef = useRef(null);
    const [activeGroup, setActiveGroup] = useState("tag");
    const [selectedTags, setSelectedTags] = useState([]);
    const [selectedItemCount, setSelectedItemCount] = useState(0);
    const [selectedTagCount, setSelectedTagCount] = useState(0);
    const [popupImgUrl, setPopupImgUrl] = useState('');
    const [applyFilter, setApplyFilter] = useState('onClick');


    let [field] = useField(rest);
    const { name: fieldName } = field || {};

    let indexNo = -1;
    //check the field is array type or not
    if (/\[.*\]/.test(fieldName)) {
        const match = fieldName.match(/^(.*?)\[\d+\]/);
        const extractedName = match[1];

        const matche2 = /\[(\d+)\]/.exec(fieldName);
        indexNo = matche2[1];

        field.name = extractedName;
        field.value = initialData[keyUpdate];
    }
    else {
        field.value = initialData;
    }

    useEffect(() => {
        setSelectedTags([]);
        if (selectedItems?.length > 0 && (tags.length > 0 || initialServerSelectedDataDetails.length > 0)) {
            let tagList = [];
            let itemList = [];
            selectedItems.forEach(selectedItem => {
                if (selectedItem.startsWith("tag-")) {
                    const targetTag = tags.find(tag => tag.id == selectedItem);
                    if (targetTag !== undefined) {
                        tagList.push(targetTag);
                    }
                } else if (selectedItem.startsWith("item-")) {
                    const targetItem = initialServerSelectedDataDetails.find(item => item.id == selectedItem);
                    if (targetItem !== undefined) {
                        itemList.push(targetItem);
                    }
                }
            })
            setSelectedTags(prevState => [...tagList, ...itemList]);
        }
    }, [detailLoading, initLoading]);

    useEffect(() => {
        if (selectedTags) {
            const tagCount = selectedTags.filter(item => item.id.startsWith("tag-")).length;
            setSelectedTagCount(tagCount);

            const itemCount = selectedTags.filter(item => item.id.startsWith("item-")).length;
            setSelectedItemCount(itemCount);
        }
    }, [selectedTags])

    useEffect(() => {
        if (elementRef.current) {
            // Get the filter row element
            let filterRowElement;
            if (activeGroup === 'tag') {
                filterRowElement = tagDataGridRef.current.instance.element().querySelector('.dx-datagrid-filter-row');
            } else {
                filterRowElement = itemDataGridRef.current.instance.element().querySelector('.dx-datagrid-filter-row');
            }

            if (filterRowElement) {
                const dataField = elementRef.current.column.dataField;
                // Find the editor elements within the filter row
                const filterCols = filterRowElement.querySelectorAll('.dx-datagrid-filter-row td');
                filterCols.forEach((filterCol, columnIndex) => {
                    // Do something with each editor element (e.g., log its value)
                    if (columnIndex === elementRef.current.columnIndex) {
                        const editorElement = filterCol.querySelector('.dx-texteditor-input');
                        if (editorElement) {
                            if (
                                dataField === 'tagCount'
                            )
                            {
                                if (editorElement.hasAttribute('aria-controls')) {
                                    editorElement.focus();
                                }
                                else {
                                    editorElement.click();
                                }
                            }
                            else {
                                if (applyFilter === 'onClick') {
                                    editorElement.focus();
                                }
                                else {
                                    editorElement.click();
                                }
                            }
                        }
                    }
                });
            }
        }
    }, [applyFilter])

    const updateFormikState = (selectedTags = []) => {
        let selectedTagIds = selectedTags.map(x => x[valueExpr]);

        //For array-object type field
        if (Array.isArray(initialData)) {
            setFieldValue(fieldName, selectedTagIds);
        }
        else if (typeof initialData === 'object') {
            const { values = {} } = formik || {};

            let updatedState = values[field.name] || [];
            if (updatedState[indexNo]) {
                updatedState[indexNo][keyUpdate] = selectedTagIds;
            }

            setFieldValue(field.name, updatedState);
        }
    }

    const handleOnRemoveTag = (e, i, tag) => {
        e.stopPropagation();

        setSelectedTags((prevState) => prevState.filter((x, index) => index != i));
        let newStateVal = selectedTags.filter((x, index) => index != i);
        updateFormikState(newStateVal);
    };

    const handleOnClearAll = (e) => {
        e.stopPropagation();

        setSelectedTags([]);
        updateFormikState([]);
    };

    const handleOnTabChange = (e, tabKey) => {
        e.stopPropagation();
        console.log("tabKey -->", tabKey)
        setActiveGroup(tabKey);
        resetTable(tagDataGridRef);
        resetTable(itemDataGridRef);
    };

    function resetTable(dataGridRef) {
        if (dataGridRef.current) {
            const dataGrid = dataGridRef.current.instance;
            dataGrid.refresh(true);
        }
    }

    const closeModal = () => {
        updateFormikState(selectedTags);

        //console.log('closeModal....')
        const customTagBoxes = document.querySelectorAll('.custom-tagbox');
        customTagBoxes.forEach(customTagBox => {
            customTagBox.classList.remove('openTagListSingleModal');
        })
        sessionStorage.setItem("tagBoxCloseModal", true);
        setActiveGroup('tag');
        if (tagDataGridRef.current) {
            tagDataGridRef.current.instance.clearFilter();
        }
    }

    const onRowClick = (e) => {
        // console.log("onRowClick e", e)
        if (maxItemSelectLimit !== undefined && selectedTags.length >= maxItemSelectLimit) {
            showToast('Maximum limit is encountered', 'warning');
            return;
        }
        setSelectedTags(prevState => [...prevState, e.data])

        setTimeout(() => {
            if (tagBoxWrapperRef.current) {
                tagBoxWrapperRef.current.scrollTop = tagBoxWrapperRef.current.scrollHeight;
            }
        }, 0)
    }

    const imgCellRender = (data) => {
        return <img src={data.value}  alt="" />;
    }

    const onCellHoverChanged = (e) => {
        //console.log('onCellHoverChanged e ', e)
        const { column, data, eventType, rowType } = e;
        setPopupImgUrl("");
        if (rowType === 'data' && column.dataField === 'itemImagePath1') {
            if(eventType === 'mouseover') {
                setPopupImgUrl(data.itemImagePath1);
            }
        }
    }

    const nameCellRender = (e) => {
        if (e.rowType === 'data' && selectedItems?.length > 0) {
            if (selectedItems.includes(e.data.id)) {
                return <span className="text-white">{e.value}</span>;
            } else {
                return e.value;
            }
        } else {
            return e.value;
        }
    }

    const handleOnCellClick = (e) => {
        // console.log('handleColumnClick e ', e)
        const { dataField } = e.column || {};

        if (e.rowType === 'filter') {
            if (e.rowIndex === 1) {
                if (dataField === 'tagCount') {
                    setApplyFilter('auto');
                } else {
                    setApplyFilter('onClick');
                }
                // last filtered element ref set
                elementRef.current = e;
            }
        }
    }

    const onEditorPreparing = (e) => {
        // console.log(e, 'onEditorPreparing')
        if (e.parentType == 'filterRow' && e.dataField !== "tagCount") {
            e.editorOptions.onFocusOut = function () {
                e.element.querySelector('.dx-apply-button').click();
            };
            e.editorOptions.onEnterKey = function () {
                e.element.querySelector('.dx-apply-button').click();
            };
        }

        if (e.parentType === "filterRow") {
            if (e.dataField === "tagCount") {
                //console.log('tagCount..........')
                e.editorName = "dxTagBox";
                e.editorOptions.selectAllText = "すべてを選択";
                e.editorOptions.allowFilter = false;
                e.editorOptions.showSelectionControls = true;
                e.editorOptions.height = 30;
                e.editorOptions.dropDownOptions = {
                    minWidth: 220,
                };
                e.editorOptions.value = e.value || [];
                e.editorOptions.applyValueMode = "useButtons";
                e.editorOptions.onValueChanged = function (args) {
                    e.setValue(args.value);
                };

                if (e.dataField === "tagCount") {
                    e.editorOptions.dataSource = tags;
                    e.editorOptions.displayExpr = "tagName";
                    e.editorOptions.valueExpr = "tagId";
                }
            }
        }
    };

    const tagBoxListHeight = () => {
        if (selectedTagsRef.current?.clientHeight <= 140) {
            return { height: `calc(100vh - ${(165+selectedTagsRef.current?.clientHeight)}px)` }
        }
    }

    const chooseColumns = (e) => {
        e.preventDefault();
        if (tagDataGridRef.current) {
            tagDataGridRef.current.instance.hideColumnChooser();
            tagDataGridRef.current.instance.showColumnChooser();
        }
        if (itemDataGridRef.current) {
            itemDataGridRef.current.instance.hideColumnChooser();
            itemDataGridRef.current.instance.showColumnChooser();
        }
    }

    return (
        <div className="custom-tagbox relative w-full"
             onMouseEnter={(e) => setPopupImgUrl('')}
             onMouseLeave={(e) => setPopupImgUrl('')}
        >
            <div className="relative h-full">
                {activeGroup === 'item' && popupImgUrl &&
                    <div className="image-popup">
                        <img src={popupImgUrl} alt="" />
                    </div>
                }
                {label && (
                    <div className="tag-box-label-wrapper">
                        <label className={`${labelClassName} tag-box-label`} dangerouslySetInnerHTML={{ __html: label }}>
                            {isRequired ? <AddRequiredText requiredText={requiredText} /> : null}
                        </label>
                        <span className="tag-box-label-count">アイテム：{selectedItemCount}　タグ：{selectedTagCount}</span>
                        <span className="tag-box-choose-columns">
                            <MenuButtonSub className="ml-2 max-w-[80px] min-w-[80px]" onClick={chooseColumns}>
                                <i className="dx-icon dx-icon-column-chooser"></i>
                            </MenuButtonSub>
                        </span>
                    </div>
                )}
                <div className="tagbox-middle-area">
                    <div
                        ref={selectedTagsRef}
                        className="!rounded-none toggle mb-3 dx-show-invalid-badge dx-tagbox dx-tagbox-only-select dx-selectbox dx-textbox dx-texteditor dx-editor-outlined dx-widget dx-tagbox-default-template dx-dropdowneditor dx-dropdowneditor-field-clickable dx-dropdowneditor-active dx-skip-gesture-event">
                        <div className="dx-dropdowneditor-input-wrapper dx-selectbox-container">
                            <div className="dx-texteditor-container dx-native-click">
                                <div
                                    ref={tagBoxWrapperRef}
                                    className="min-h-[37px] dx-texteditor-input-container dx-tag-container dx-native-click tagBoxWrapper"
                                >
                                    {selectedTags && selectedTags.map((x, i) => (
                                        <div className="dx-tag" key={uuid()}>
                                            <div style={{ backgroundColor: bgGroupedColorMapper[x.type] ? bgGroupedColorMapper[x.type] : '' }} className="dx-tag-content">
                                                <span>{x.type === 'tag' ? x.tagName : [x.itemName, x.itemAttribute3, x.itemAttribute4, x.itemAttribute5, x.tagCount].filter(v => !!v).join('')}</span>
                                                <div className="dx-tag-remove-button" onClick={(e) => handleOnRemoveTag(e, i, x)}></div>
                                            </div>
                                        </div>
                                    ))}

                                    {selectedTags.length == 0 && <div className="dx-placeholder">{placeholder}</div>}
                                </div>

                                {selectedTags.length > 0 && (
                                    <div className="dx-texteditor-buttons-container">
                                        <span onClick={handleOnClearAll} className="dx-clear-button-area flex align-middle items-center" >
                                            <span className="dx-icon dx-icon-clear pointer-events-none"></span>
                                        </span>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>

                    <div className="custom-tagbox-list" style={tagBoxListHeight()}>
                        {grouped && (
                            <div className="tab space-x-5 mb-2">
                                {responseData.map((x) => (
                                    <button type="button"
                                            key={uuid()}
                                            className={`tablinks ${x.key == activeGroup ? 'active' : ''}`}
                                            onClick={(e) => handleOnTabChange(e, x.key)}
                                    >
                                        {x.caption}
                                    </button>
                                ))}
                            </div>
                        )}

                        {/* ================= Tag list start =================*/}
                        {
                            tagDataSource && activeGroup === 'tag' &&
                            <Table
                                className="tagbox-tag-table"
                                isLoading={tagLoading}
                                dataSource={tagDataSource}
                                paging={false}
                                dataGridRef={tagDataGridRef}
                                onRowClick={onRowClick}
                                onCellClick={handleOnCellClick}
                                onEditorPreparing={onEditorPreparing}
                                allowColumnResizing={true}
                                allowColumnReordering={true}
                                stateStoring={true}
                                stateStoringPath="customTagBoxTags"
                            >
                                <FilterRow  applyFilter={applyFilter} visible={true}/>
                                <Column
                                    caption="タグ名"
                                    dataField="tagName"
                                    cssClass="cursor-pointer min-w-200px"
                                    cellRender={nameCellRender}
                                />
                                <Column
                                    caption="在庫数"
                                    dataField="itemStockUnsetCount"
                                    width={120}
                                    cssClass="cursor-pointer"
                                    alignment="right"
                                    dataType="number"
                                />
                                <Column
                                    caption="アイテム数"
                                    dataField="itemCount"
                                    width={120}
                                    cssClass="cursor-pointer"
                                    alignment="right"
                                    dataType="number"
                                />
                            </Table>
                        }
                        {/* ================= Tag list end =================*/}

                        {/* ================= Item list start =================*/}
                        {
                            itemDataSource && activeGroup === 'item' &&
                            <Table
                                className="tagbox-item-table"
                                isLoading={itemLoading}
                                dataSource={itemDataSource}
                                onCellHoverChanged={onCellHoverChanged}
                                dataGridRef={itemDataGridRef}
                                onRowClick={onRowClick}
                                onCellClick={handleOnCellClick}
                                onEditorPreparing={onEditorPreparing}
                                allowColumnResizing={true}
                                allowColumnReordering={true}
                                stateStoring={true}
                                stateStoringPath="customTagBoxItems"
                            >
                                <FilterRow  applyFilter={applyFilter} visible={true}/>
                                <Column
                                    caption="画像"
                                    dataField="itemImagePath1"
                                    width="30"
                                    allowFiltering={false}
                                    allowSorting={false}
                                    cellRender={imgCellRender}
                                    cssClass="cursor-pointer item-img"
                                />
                                <Column
                                    caption="アイテム名"
                                    dataField="itemName"
                                    width={400}
                                    cssClass="cursor-pointer"
                                    cellRender={nameCellRender}
                                />
                                <Column
                                    caption="シリアルナンバー"
                                    dataField="itemAttribute3"
                                    width={150}
                                    cssClass="cursor-pointer"
                                    alignment="center"
                                />
                                <Column
                                    caption="レアリティ"
                                    dataField="itemAttribute4"
                                    width={120}
                                    cssClass="cursor-pointer"
                                    alignment="center"
                                />
                                <Column
                                    caption="鑑定/ランク"
                                    dataField="itemAttribute5"
                                    width={120}
                                    cssClass="cursor-pointer"
                                    alignment="center"
                                />
                                <Column
                                    caption="状態"
                                    dataField="itemAttribute6"
                                    width={120}
                                    cssClass="cursor-pointer"
                                    alignment="center"
                                />
                                <Column
                                    caption="シリーズ名"
                                    dataField="itemAttribute2"
                                    width={120}
                                    cssClass="cursor-pointer"
                                    alignment="center"
                                />
                                <Column
                                    caption="在庫数"
                                    dataField="itemStockUnsetCount"
                                    width={120}
                                    cssClass="cursor-pointer"
                                    alignment="right"
                                />
                                <Column
                                    caption="タグ名"
                                    dataField="tagCount"
                                    cssClass="cursor-pointer tag-box min-w-200px"
                                />
                            </Table>
                        }
                        {/* ================= Item list end =================*/}
                    </div>
                </div>

                <div className="dx-toolbar dx-widget dx-visibility-change-handler dx-collection dx-popup-bottom dx-popup-cancel dx-popup-done tagbox-footer-area" role="toolbar" >
                    <Button
                        className='modal-button modal-close-btn'
                        text='このモーダルを閉じる'
                        type="button"
                        stylingMode="contained"
                        onClick={closeModal}
                    />
                </div>
            </div>
        </div>
    )
}